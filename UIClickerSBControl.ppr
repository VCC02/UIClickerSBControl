{
    Copyright (C) 2025 VCC
    creation date: 18 Jul 2025
    initial release date: 18 Jul 2025

    author: VCC
    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:
    The above copyright notice and this permission notice shall be included
    in all copies or substantial portions of the Software.
    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
    TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
    OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
}

{$mode Delphi}{$H+}


program UIClickerSBControl;

uses
  Interfaces, SysUtils, Classes, Graphics, DllUtils,
  ClickerUtils, ClickerClientAPI, ClickerClientIntf, ClickerActionProperties
  //, LCLIntf, LCLType

  ;

function GetVarValueFromResponse(AResponse, AVarName: string): string;
var
  ListOfStrings: TStringList;
begin
  ListOfStrings := TStringList.Create;
  try
    ListOfStrings.Text := FastReplace_87ToReturn(AResponse);
    Result := ListOfStrings.Values[AVarName];
  finally
    ListOfStrings.Free;
  end;
end;


function GetErrorMessageFromResponse(AResponse: string; AVarNameForError: string = '$ExecAction_Err$'): string;
begin                                                                   //other: '$PluginError$'
  Result := GetVarValueFromResponse(AResponse, AVarNameForError);
end;


function FindBrowserWindow: string;
var
  Response, Err: string;
  VerifFindControlAPI: TClkFindControlOptionsAPI;
  VerifFindControl: TClkFindControlOptions;
  DummyDestMatchBitmapTextRecAPI: TMatchBitmapTextRecAPI;
  DummyDestMatchBitmapTextArray: TClkFindControlMatchBitmapTextAPIArr;
begin
  GetDefaultPropertyValues_FindControl(VerifFindControl);
  VerifFindControl.MatchCriteria.SearchForControlMode := sfcmFindWindow;
  VerifFindControl.MatchText := 'Mozilla Firefox'; //find a way to get the default browser, and wait for that
  VerifFindControl.MatchClassName := 'MozillaWindowClass';

  SetFindControlOptionsToAPI(VerifFindControl, VerifFindControlAPI, DummyDestMatchBitmapTextRecAPI, DummyDestMatchBitmapTextArray);

  SetLength(Response, CMaxSharedStringLength);
  SetLength(Response, ExecuteFindControlAction(@WideString('Wait for browser.')[1], 3000, @VerifFindControlAPI, False, @WideString('Disk')[1], @Response[1]));
  Result := Response;

  Err := GetErrorMessageFromResponse(Response);
  if (Pos('Timeout at', Err) > 0) and
     (Pos('$Control_Text$="chrome"  $Control_Class$="chrome"', Err) > 0) then
  begin
    GetDefaultPropertyValues_FindControl(VerifFindControl);
    VerifFindControl.MatchCriteria.SearchForControlMode := sfcmFindWindow;
    VerifFindControl.MatchText := 'chrome'; //find a way to get the default browser, and wait for that
    VerifFindControl.MatchClassName := 'chrome';

    SetFindControlOptionsToAPI(VerifFindControl, VerifFindControlAPI, DummyDestMatchBitmapTextRecAPI, DummyDestMatchBitmapTextArray);

    SetLength(Response, CMaxSharedStringLength);
    SetLength(Response, ExecuteFindControlAction(@WideString('Wait for browser.')[1], 3000, @VerifFindControlAPI, False, @WideString('Disk')[1], @Response[1]));
    Result := Response;
  end;
  //maybe search for Edge
end;


function OpenDefaultBrowser: string;
var
  ExecAppActionAPI: TClkExecAppOptionsAPI;
  ExecAppAction: TClkExecAppOptions;
  Response: string;
begin
  GetDefaultPropertyValues_ExecApp(ExecAppAction);
  ExecAppAction.PathToApp := 'C:\Windows\explorer.exe';  //Windows can be installed somewhere else
  ExecAppAction.ListOfParams := 'http://';

  SetExecAppOptionsToAPI(ExecAppAction, ExecAppActionAPI);

  SetLength(Response, CMaxSharedStringLength);
  SetLength(Response, ExecuteExecAppAction(@WideString('Open default browser.')[1], 1000, @ExecAppActionAPI, False, @Response[1]));
  Result := GetErrorMessageFromResponse(Response);

  if Result = '' then
    Result := GetErrorMessageFromResponse(FindBrowserWindow);
end;


function OpenCustomBrowser(ABrowserName: string): string;
begin
  ABrowserName := Copy(ABrowserName, 1, 100);
  Result := '';
  WriteLn('Opening custom browser ' + ABrowserName + ' is not implemented.');
end;


function TypeAddressIntoAddressBar(AAddress: string; APressReturn: Boolean = True): string;
var
  Response: string;
  SetControlTextAPI: TClkSetTextOptionsAPI;
  SetControlText: TClkSetTextOptions;
  WindowOperationsAPI: TClkWindowOperationsOptionsAPI;
  WindowOperations: TClkWindowOperationsOptions;
begin
  Result := GetErrorMessageFromResponse(FindBrowserWindow);
  if Result <> '' then
    Exit;

  GetDefaultPropertyValues_WindowOperations(WindowOperations);
  SetWindowOperationsOptionsToAPI(WindowOperations, WindowOperationsAPI);

  SetLength(Response, CMaxSharedStringLength);
  SetLength(Response, ExecuteWindowOperationsAction(@WideString('Bring browser to front.')[1], 1000, @WindowOperationsAPI, False, @Response[1]));
  Result := GetErrorMessageFromResponse(Response);

  if Result <> '' then
    Exit;

  //ToDo: Add a FindSubControl action, to get the address bar
  //ToDo: Add a Click action, to focus the address bar

  GetDefaultPropertyValues_SetControlText(SetControlText);
  SetControlText.Text := AAddress;

  if APressReturn then
    SetControlText.Text := SetControlText.Text + '$Return$';

  SetControlText.ControlType := stKeystrokes;
  SetControlText.DelayBetweenKeyStrokes := '$Random(200, 1500)$';

  SetSetControlTextOptionsToAPI(SetControlText, SetControlTextAPI);

  SetLength(Response, CMaxSharedStringLength);
  SetLength(Response, ExecuteSetControlTextAction(@WideString('Type on browser.')[1], 1000, @SetControlTextAPI, False, @Response[1]));
  Result := GetErrorMessageFromResponse(Response);
end;


function Clear_DialogIsVisible: string; // Clear DialogIsVisible
var
  SetVarAPI: TClkSetVarOptionsAPI;
  SetVar: TClkSetVarOptions;
begin
  GetDefaultPropertyValues_SetVar(SetVar);
  SetVar.ListOfVarNames := '$DialogIsVisible$';
  SetVar.ListOfVarValues := 'False';
  SetVar.ListOfVarEvalBefore := '0';

  SetSetVarOptionsToAPI(SetVar, SetVarAPI);

  SetLength(Result, CMaxSharedStringLength);
  SetLength(Result, ExecuteSetVarAction(@WideString('Clear DialogIsVisible')[1], 0, @SetVarAPI, False, @Result[1]));
end;


function Find_dialog: string; // Find dialog
var
  FindControlAPI: TClkFindControlOptionsAPI;
  FindControl: TClkFindControlOptions;
  DummyDestMatchBitmapTextRecAPI: TMatchBitmapTextRecAPI;
  DummyDestMatchBitmapTextArray: TClkFindControlMatchBitmapTextAPIArr;
begin
  GetDefaultPropertyValues_FindControl(FindControl);
  FindControl.AllowToFail := True;
  FindControl.MatchClassName := 'MozillaDropShadowWindowClass';

  SetFindControlOptionsToAPI(FindControl, FindControlAPI, DummyDestMatchBitmapTextRecAPI, DummyDestMatchBitmapTextArray);

  SetLength(Result, CMaxSharedStringLength);
  SetLength(Result, ExecuteFindControlAction(@WideString('Find dialog')[1], 3000, @FindControlAPI, False, @WideString('Disk')[1], @Result[1]));
end;


function Bring_to_front: string; // Bring to front
var
  WindowOperationsAPI: TClkWindowOperationsOptionsAPI;
  WindowOperations: TClkWindowOperationsOptions;
begin
  GetDefaultPropertyValues_WindowOperations(WindowOperations);

  SetWindowOperationsOptionsToAPI(WindowOperations, WindowOperationsAPI);

  SetLength(Result, CMaxSharedStringLength);
  SetLength(Result, ExecuteWindowOperationsAction(@WideString('Bring to front')[1], 0, @WindowOperationsAPI, False, @Result[1]));
end;


function DialogIsVisible: string; // DialogIsVisible
var
  SetVarAPI: TClkSetVarOptionsAPI;
  SetVar: TClkSetVarOptions;
begin
  GetDefaultPropertyValues_SetVar(SetVar);
  SetVar.ListOfVarNames := '$DialogIsVisible$';
  SetVar.ListOfVarValues := 'True';
  SetVar.ListOfVarEvalBefore := '0';

  SetSetVarOptionsToAPI(SetVar, SetVarAPI);

  SetLength(Result, CMaxSharedStringLength);
  SetLength(Result, ExecuteSetVarAction(@WideString('DialogIsVisible')[1], 0, @SetVarAPI, False, @Result[1]));
end;


function Find_text_on_button: string; // Find text on button
var
  FindSubControlAPI: TClkFindSubControlOptionsAPI;
  FindSubControl: TClkFindSubControlOptions;
  DestMatchBitmapTextRecAPI: TMatchBitmapTextRecAPI;
  DestMatchBitmapTextArray: TClkFindControlMatchBitmapTextAPIArr;
begin
  GetDefaultPropertyValues_FindSubControl(FindSubControl);
  FindSubControl.MatchText := 'Dismiss';
  SetLength(FindSubControl.MatchBitmapText, 2);
  FindSubControl.MatchBitmapText[0].ForegroundColor := '000000';
  FindSubControl.MatchBitmapText[0].BackgroundColor := 'F2EFEF';
  FindSubControl.MatchBitmapText[0].FontName := 'Segoe UI';
  FindSubControl.MatchBitmapText[0].FontSize := 11;
  FindSubControl.MatchBitmapText[0].FontQuality := TFontQuality(4);
  FindSubControl.MatchBitmapText[1].ForegroundColor := '000000';
  FindSubControl.MatchBitmapText[1].BackgroundColor := 'F2EFEF';
  FindSubControl.MatchBitmapText[1].FontName := 'Segoe UI';
  FindSubControl.MatchBitmapText[1].FontSize := 11;
  FindSubControl.MatchBitmapText[1].FontQuality := TFontQuality(5);
  FindSubControl.MatchBitmapText[1].ProfileName := 'Profile [1]';
  FindSubControl.InitialRectangle.Left := '$Control_Right$';
  FindSubControl.InitialRectangle.Top := '$Control_Bottom$';
  FindSubControl.InitialRectangle.LeftOffset := '-111';
  FindSubControl.InitialRectangle.TopOffset := '-64';
  FindSubControl.InitialRectangle.RightOffset := '-10';
  FindSubControl.InitialRectangle.BottomOffset := '-9';
  FindSubControl.ColorError := '40';
  FindSubControl.AllowedColorErrorCount := '200';
  FindSubControl.CropFromScreenshot := True;

  SetFindSubControlOptionsToAPI(FindSubControl, FindSubControlAPI, DestMatchBitmapTextRecAPI, DestMatchBitmapTextArray);

  SetLength(Result, CMaxSharedStringLength);
  SetLength(Result, ExecuteFindSubControlAction(@WideString('Find text on button')[1], 1000, @FindSubControlAPI, False, @WideString('Disk')[1], @Result[1]));
end;


function _Click_: string; // "Click"
var
  ClickAPI: TClkClickOptionsAPI;
  Click: TClkClickOptions;
begin
  GetDefaultPropertyValues_Click(Click);
  Click.LeaveMouse := True;
  Click.DelayAfterMovingToDestination := '500';
  Click.DelayAfterMouseDown := '400';
  Click.MoveDuration := '800';

  SetClickOptionsToAPI(Click, ClickAPI);

  SetLength(Result, CMaxSharedStringLength);
  SetLength(Result, ExecuteClickAction(@WideString('"Click"')[1], 0, @ClickAPI, False, @Result[1]));
end;



function DismissFireFoxUpdateAvailableDialog(AReserved: string): string;
var
  Response: string;
begin
  Response := Clear_DialogIsVisible;
  Result := GetErrorMessageFromResponse(Response);

  if Result <> '' then
    Exit;

  Response := Find_dialog;
  Result := GetErrorMessageFromResponse(Response);

  if Result <> '' then
    Exit;

  if (Result = '') and (GetVarValueFromResponse(Response, '$LastAction_Status$') = 'Allowed Failed') then
  begin
    Result := 'Dialog not visible.';
    Exit;
  end;

  if GetVarValueFromResponse(Response, '$LastAction_Status$') = 'Successful' then
  begin
    Response := Bring_to_front;
    Result := GetErrorMessageFromResponse(Response);

    if Result <> '' then
      Exit;
  end
  else
    if GetVarValueFromResponse(Response, '$LastAction_Status$') = 'Successful' then
    begin
      Result := 'Dialog not visible.';
      Exit;
    end;

  if GetVarValueFromResponse(Response, '$LastAction_Status$') = 'Successful' then
  begin
    Response := DialogIsVisible;
    Result := GetErrorMessageFromResponse(Response);

    if Result <> '' then
      Exit;
  end;

  if GetVarValueFromResponse(Response, '$DialogIsVisible$') = 'True' then
  begin
    Response := Find_text_on_button;
    Result := GetErrorMessageFromResponse(Response);

    if Result <> '' then
      Exit;
  end;

  if GetVarValueFromResponse(Response, '$DialogIsVisible$') = 'True' then
  begin
    Response := _Click_;
    Result := GetErrorMessageFromResponse(Response);

    if Result <> '' then
      Exit;
  end;

  if GetVarValueFromResponse(Response, '$DialogIsVisible$') = 'True' then
  begin
    Response := Find_dialog;
    Result := GetErrorMessageFromResponse(Response);

    if Result <> '' then
      Exit;

    Result := GetVarValueFromResponse(Response, '$LastAction_Status$');
    if Result <> 'Allowed Failed' then
    begin
      Result := Result + '  // Expected the dialog to be closed after clicking "Dismiss".';
      Exit;
    end
    else
      Result := '';
  end;
end;


function TestConnectionToUIClicker: Boolean;
var
  Response: string;
begin
  SetLength(Response, CMaxSharedStringLength);
  SetLength(Response, TestConnectionToServer(@Response[1]));

  Result := Response = 'Connection ok';//CREResp_ConnectionOK;
end;


var
  ExeExt: string;

begin
  if ParamCount = 0 then
  begin
    ExeExt := {$IFDEF Windows} '.exe' {$ELSE} '' {$ENDIF};
    WriteLn('Usage:');
    WriteLn('  UIClickerSBControl' + ExeExt + ' --OpenBrowser Default');
    WriteLn('  UIClickerSBControl' + ExeExt + ' --OpenBrowser <CustomBrowserName>');
    WriteLn('  UIClickerSBControl' + ExeExt + ' --TypeAddressIntoAddressBar <Address>');
    WriteLn('  UIClickerSBControl' + ExeExt + ' --DismissUpdateAvailableDialog <ReservedOptions>');
    Exit;
  end;

  try
    {$IFDEF Windows}
      LoadClickerClient('..\UIClicker\ClickerClient\ClickerClient.dll');
    {$ELSE}
      LoadClickerClient('../UIClicker/ClickerClient/ClickerClient.so');
    {$ENDIF}
    try
      InitClickerClient;
      try
        if not TestConnectionToUIClicker then
        begin
          WriteLn('Can''t connect to UIClicker.');
          Exit;
        end;

        if ParamStr(1) = '--OpenBrowser' then
        begin
          if ParamStr(2) = 'Default' then
            WriteLn(OpenDefaultBrowser)
          else
            WriteLn(OpenCustomBrowser(ParamStr(2)));
        end;

        if ParamStr(1) = '--TypeAddressIntoAddressBar' then
          WriteLn(TypeAddressIntoAddressBar(ParamStr(2)));

        if ParamStr(1) = '--DismissUpdateAvailableDialog' then
          WriteLn(DismissFireFoxUpdateAvailableDialog(ParamStr(2)));
      finally
        DoneClickerClient;
      end;
    finally
      UnLoadClickerClient;
    end;

  except
    on E: Exception do
      WriteLn(E.Message);
  end;
end.

